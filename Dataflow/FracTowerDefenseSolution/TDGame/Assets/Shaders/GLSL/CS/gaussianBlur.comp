#version 430 core

uniform vec2 u_imageDimensions;
uniform bool u_horizontal;
uniform int u_mipLevel;

uniform float u_offset[3] = float[]( 0.0, 1.3846153846, 3.2307692308 );
uniform float u_weights[3] = float[]( 0.2270270270, 0.3162162162, 0.0702702703 );

uniform sampler2D u_image;

layout(local_size_x = 32, local_size_y = 32) in;
layout(rgba16f, binding = 0) uniform writeonly image2D u_mipImage;

void main()
{             
     ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
     vec2 uvCoords = vec2(gl_GlobalInvocationID.xy + vec2(0.5, 0.5)) / vec2(u_imageDimensions); //Transfered pixelcoords into [0, 1] UV space.

     vec3 blurColor = textureLod(u_image, uvCoords, u_mipLevel).rgb * u_weights[0];

     if(u_horizontal)
     {
         for(int i = 1; i < 3; ++i)
         {
            blurColor += textureLod(u_image, uvCoords + vec2(u_offset[i] / u_imageDimensions.x, 0.0), u_mipLevel).rgb * u_weights[i];
            blurColor += textureLod(u_image, uvCoords - vec2(u_offset[i] / u_imageDimensions.x, 0.0), u_mipLevel).rgb * u_weights[i];
         }
     }
     else
     {
         for(int i = 1; i < 3; ++i)
         {
            blurColor += textureLod(u_image, uvCoords + vec2(0.0, u_offset[i] / u_imageDimensions.y), u_mipLevel).rgb * u_weights[i];
            blurColor += textureLod(u_image, uvCoords - vec2(0.0, u_offset[i] / u_imageDimensions.y), u_mipLevel).rgb * u_weights[i];
         }
     }

     vec4 pixel = vec4(blurColor.rgb, 1.0);
     imageStore(u_mipImage, pixelCoords, pixel);
}